name: 3 Promote to Production ðŸš€

concurrency: preprod

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version ðŸ“¦'
        required: true
        type: string
      
        
env:
  VERSION: ${{ inputs.version }}

jobs:
  MuleDeploy:
    runs-on: ubuntu-22.04
    environment: production
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: "Validar nÃºmero de versiÃ³n"
      run: |
        echo "Version ${{inputs.version}}"
        [[ "${{inputs.version}}" =~ ^([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*).*$ ]] && echo "Correcto" || exit 1
        echo "> Validando si existe el pre-release"
        ! git tag ${{inputs.version}}

    
    - name: "Configurar Git"
      run: |
        git config --global user.name 'Github'
        git config --global user.email 'workflow@noreply.github.com'
        git branch --show-current
        git checkout ${{inputs.version}}
        git fetch
        git branch -a --contains tags/${{inputs.version}}

    - name: "Crear rama release"
      run: |
        git checkout ${{inputs.version}}
        git checkout -b releases/${{inputs.version}}
        # Copiando los workflows actualizados...
        git checkout main .github/workflows/manual_deploy_dev.yml || echo "Sin cambios"
        git checkout main .github/workflows/manual_hotfix.yml || echo "Sin cambios"
        git checkout main .github/workflows/manual_pre-release.yml || echo "Sin cambios"
        git checkout main .github/workflows/manual_redeploy.yml || echo "Sin cambios"
        git checkout main .github/workflows/manual_release.yml || echo "Sin cambios"
        git checkout main .github/workflows/push-manual_main.yml || echo "Sin cambios"
        git checkout main pfg-sam.json || echo "Sin cambios"
        git commit -m "ci(github): Se agregan workflows actualizados" || echo "Sin cambios"
        git diff HEAD^ HEAD
        git tag --force ${{inputs.version}} 
        git push origin releases/${{inputs.version}} || echo "No se pudo crear la rama de release"
        git push origin ${{inputs.version}} --force || echo "No se pudo crear el tag de release"

    # To do: Eliminar rama de fix


    # Se actualiza el release marcado como pre-release
    - name: Release
      run: |
        gh release delete ${{inputs.version}} -y || echo "No hay release por eliminar"
        gh release create ${{inputs.version}} --title ${{inputs.version}} -F CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin' # See 'Supported distributions' for available options
        java-version: '8'
        cache: 'maven'
    - uses: s4u/maven-settings-action@v2.6.0
      with:
        servers: '[{"id": "anypoint-exchange-v3", "username": "~~~Client~~~", "password": "${{secrets.MULE_CLIENT_ID}}~?~${{secrets.MULE_CLIENT_SECRET}}"}]'
    - name: "Construir y Publicar en Exchange"
      run: |
        mvn versions:set -DnewVersion=$VERSION
        mvn clean deploy -DskipTests -Dlicense.skip=true || echo "No fue posible publicarse en exchange"
    - name: "Desplegar"
      run: mvn clean package deploy -Dlicense.skip=true -Dclientid=${{secrets.MULE_CLIENT_ID}} -Dclientsecret=${{secrets.MULE_CLIENT_SECRET}} -Denvironment=SBX-SPS -DmuleDeploy            
