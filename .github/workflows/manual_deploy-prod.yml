name: 3 Promote to Production ðŸ“¦ðŸš€

concurrency: production

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version ðŸ“¦'
        required: true
        type: string
      replicas:
        description: 'NÃºmero de replicas a desplegar ðŸ¤–ðŸ¤–'
        required: false
        type: string
        default: "1"      
        
env:
  VERSION: ${{ inputs.version }}
  AMBIENTE: production
  MULE_ENV: Production
  HASH: ${{ github.sha }}

jobs:
  MuleDeploy:
    runs-on: ubuntu-22.04
    environment: Production
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: "Validar nÃºmero de versiÃ³n"
      run: |
        echo "Version ${{inputs.version}}"
        [[ "${{inputs.version}}" =~ ^([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*).*$ ]] && echo "Correcto" || exit 1
        echo "> Validando si existe el pre-release"
        ! git tag ${{inputs.version}}

    
    - name: "Configurar Git"
      run: |
        git config --global user.name 'Github'
        git config --global user.email 'workflow@noreply.github.com'
        git branch --show-current
        git checkout ${{inputs.version}}
        git fetch
        git branch -a --contains tags/${{inputs.version}}

    - name: "Crear rama release"
      run: |
        git checkout ${{inputs.version}}
        git checkout -b releases/${{inputs.version}}
        # Copiando los workflows actualizados...
        git checkout main .github/workflows/manual_deploy-pre.yml
        git checkout main .github/workflows/manual_deploy-prod.yml
        git checkout main .github/workflows/manual_fix.yml
        git checkout main .github/workflows/manual_redeploy.yml
        git checkout main .github/workflows/push-manual_deploy-dev.yml
        git commit -m "ci(github): Se agregan workflows actualizados" || echo "Sin cambios"
        git diff HEAD^ HEAD
        git tag --force ${{inputs.version}} 
        git push origin releases/${{inputs.version}} || echo "No se pudo crear la rama de release"
        git push origin ${{inputs.version}} --force || echo "No se pudo crear el tag de release"

    # To do: Eliminar rama de fix


    # Se actualiza el release marcado como pre-release
    - name: Release
      run: |
        gh release delete ${{inputs.version}} -y || echo "No hay release por eliminar"
        gh release create ${{inputs.version}} --title ${{inputs.version}} -F CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin' # See 'Supported distributions' for available options
        java-version: '8'
        cache: 'maven'
    - uses: s4u/maven-settings-action@v2.6.0
      with:
        servers: '[{"id": "anypoint-exchange-v3", "username": "~~~Client~~~", "password": "${{secrets.MULE_CLIENT_ID}}~?~${{secrets.MULE_CLIENT_SECRET}}"}]'
    - name: Obtener nombre de proyecto
      run: |
        import os, re
        from xml.etree import ElementTree

        # Obtiene nombre del POM
        namespaces = {'xmlns' : 'http://maven.apache.org/POM/4.0.0'}
        tree = ElementTree.parse("pom.xml")
        root = tree.getroot()
        name = root.find("./xmlns:name", namespaces=namespaces)
        print(f"pom/name: {name}")

        # Convirte nombre a un nombre DNS valido
        nombre = re.sub(r"[^a-zA-Z0-9]+", "-", name.text).lower()
        print(f"nombre_limpio: {nombre}")      

        # Escribe variable
        print("Escribiendo nombre en GITHUB_ENV")
        with open(os.getenv('GITHUB_ENV'), "a") as github_env:
          github_env.write(f"nombre_limpio={nombre}")
      shell: python
    - name: "Construir y Publicar en Exchange"
      run: |
        mvn versions:set -DnewVersion=$VERSION
        mvn clean deploy -Dlicense.skip=true || echo "No se publico en exchange"
    - name: "Publicar resultados de pruebas"
      uses: EnricoMi/publish-unit-test-result-action@v2.0.0
      if: always()
      with:
        junit_files: "target/surefire-reports/*.xml"
    - name: "Desplegar"
      run: mvn clean package deploy -DskipTests -Dlicense.skip=true -Dclientid=${{secrets.MULE_CLIENT_ID}} -Dclientsecret=${{secrets.MULE_CLIENT_SECRET}} -Dappname=${{env.nombre_limpio}}-$AMBIENTE -Denvironment=$MULE_ENV -Dreplicas=${{inputs.replicas}} -DmuleDeploy
