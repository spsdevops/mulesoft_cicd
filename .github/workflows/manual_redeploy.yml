name: 4 Redeploy üêõ

concurrency: production

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version üì¶'
        required: true
        type: string
      ambiente:
        description: 'Ambiente en el que se desplegar√° üì≠'
        required: true
        type: choice
        options:
          - Develop
          - Preprod
          - Production
    
env:
  VERSION: ${{ inputs.version }}
  AMBIENTE_DEV: develop
  AMBIENTE_PRE: preprod
  AMBIENTE_PROD: production
  MULE_ENV_DEV: Develop
  MULE_ENV_PRE: Preprod
  MULE_ENV_PROD: Production


jobs:
  MuleDeploy:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.ambiente }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: "Validar n√∫mero de versi√≥n"
      run: |
        echo "Version ${{inputs.version}}"
        [[ "${{inputs.version}}" =~ ^([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*).*$ ]] && echo "Correcto" || exit 1
    
    - name: "Configurar Git"
      run: |
        git config --global user.name 'Github'
        git config --global user.email 'workflow@noreply.github.com'
        git branch --show-current
        git fetch
        git checkout releases/${{inputs.version}}

############## MULE DEPLOY #############

    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin' # See 'Supported distributions' for available options
        java-version: '8'
        cache: 'maven'
    - uses: s4u/maven-settings-action@v2.6.0
      with:
        servers: '[{"id": "anypoint-exchange-v3", "username": "~~~Client~~~", "password": "${{secrets.MULE_CLIENT_ID}}~?~${{secrets.MULE_CLIENT_SECRET}}"}]'
    - name: Obtener nombre de proyecto
      run: |
        import os, re
        from xml.etree import ElementTree

        # Obtiene nombre del POM
        namespaces = {'xmlns' : 'http://maven.apache.org/POM/4.0.0'}
        tree = ElementTree.parse("pom.xml")
        root = tree.getroot()
        name = root.find("./xmlns:name", namespaces=namespaces)
        print(f"pom/name: {name}")

        # Convirte nombre a un nombre DNS valido
        nombre = re.sub(r"[^a-zA-Z0-9]+", "-", name.text).lower()
        print(f"nombre_limpio: {nombre}")      

        # Escribe variable
        print("Escribiendo nombre en GITHUB_ENV")
        with open(os.getenv('GITHUB_ENV'), "a") as github_env:
          github_env.write(f"nombre_limpio={nombre}")
      shell: python
    - name: "Construir y Publicar en Exchange"
      run: |
        mvn versions:set -DnewVersion=$VERSION
        mvn clean deploy -DskipTests -Dlicense.skip=true || echo "No se publico en exchange"

    - name: "Desplegar"
      if: ${{ inputs.ambiente == 'Develop' }}
      run: mvn clean package deploy -Dlicense.skip=true -Dclientid=${{secrets.MULE_CLIENT_ID}} -Dclientsecret=${{secrets.MULE_CLIENT_SECRET}} -Dappname=${{env.nombre_limpio}}-$AMBIENTE_DEV -Denvironment=$MULE_ENV_DEV -DmuleDeploy

    - name: "Desplegar"
      if: ${{ inputs.ambiente == 'Preprod' }}
      run: mvn clean package deploy -Dlicense.skip=true -Dclientid=${{secrets.MULE_CLIENT_ID}} -Dclientsecret=${{secrets.MULE_CLIENT_SECRET}} -Dappname=${{env.nombre_limpio}}-$AMBIENTE_PRE -Denvironment=$MULE_ENV_PRE -DmuleDeploy

    - name: "Desplegar"
      if: ${{ inputs.ambiente == 'Production' }}
      run: mvn clean package deploy -Dlicense.skip=true -Dclientid=${{secrets.MULE_CLIENT_ID}} -Dclientsecret=${{secrets.MULE_CLIENT_SECRET}} -Dappname=${{env.nombre_limpio}}-$AMBIENTE_PROD -Denvironment=$MULE_ENV_PROD -DmuleDeploy