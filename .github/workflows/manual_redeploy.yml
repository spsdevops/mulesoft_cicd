name: 4 Redeploy Release 🐛🚀

concurrency: redeploy

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version 📦'
        required: true
        type: string
      ambiente:
        description: 'Ambiente en el que se desplegará 📭'
        required: true
        type: choice
        options:
          - Develop
          - Preprod
          - Production
      replicas:
        description: 'Número de replicas a desplegar 🤖🤖'
        required: false
        type: string
        default: "1"
    
env:
  VERSION: ${{ inputs.version }}
  AMBIENTE_DEV: develop
  AMBIENTE_PRE: preprod
  AMBIENTE_PROD: production
  MULE_ENV_DEV: Sandbox
  MULE_ENV_PRE: Preprod
  MULE_ENV_PROD: Production
  ENV_DEV: dev
  ENV_PRE: test
  ENV_PROD: prod

jobs:
  MuleDeploy:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.ambiente }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: "Validar número de versión"
      run: |
        echo "Version ${{inputs.version}}"
        [[ "${{inputs.version}}" =~ ^([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*).*$ ]] && echo "Correcto" || exit 1
    
    - name: "Configurar Git"
      run: |
        git config --global user.name 'Github'
        git config --global user.email 'workflow@noreply.github.com'
        git branch --show-current
        git fetch
        git checkout ${{inputs.version}}
        HASH=$(git rev-parse --verify HEAD)
        echo "hash=$HASH" >> $GITHUB_ENV

############## MULE DEPLOY #############

    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin' # See 'Supported distributions' for available options
        java-version: '8'
        cache: 'maven'
    - name: maven-settings-xml-action
      uses: whelk-io/maven-settings-xml-action@v20
      with:
        servers: |
          [
            {
              "id": "anypoint-exchange-v3", 
              "username": "~~~Client~~~",
              "password": "${{secrets.MULE_CLIENT_ID}}~?~${{secrets.MULE_CLIENT_SECRET}}"
            },
            {
              "id": "MuleRepository", 
              "username": "${{secrets.MULE_REPO_USER}}",
              "password": "${{secrets.MULE_REPO_PASSWORD}}"
            }
          ]
        repositories: |
          [
            {
              "id": "MuleRepository",
              "url": "https://repository.mulesoft.org/nexus-ee/content/repositories/releases-ee/"
            }
          ]
    - name: Obtener nombre de proyecto
      run: |
        import os, re
        from xml.etree import ElementTree

        # Obtiene nombre del POM
        namespaces = {'xmlns' : 'http://maven.apache.org/POM/4.0.0'}
        tree = ElementTree.parse("pom.xml")
        root = tree.getroot()
        name = root.find("./xmlns:name", namespaces=namespaces)
        print(f"pom/name: {name}")

        # Convirte nombre a un nombre DNS valido
        nombre = re.sub(r"[^a-zA-Z0-9]+", "-", name.text).lower()
        print(f"nombre_limpio: {nombre}")      

        # Escribe variable
        print("Escribiendo nombre en GITHUB_ENV")
        with open(os.getenv('GITHUB_ENV'), "a") as github_env:
          github_env.write(f"nombre_limpio={nombre}")
      shell: python
    - name: "Construir y Publicar en Exchange dev"
      if: ${{ inputs.ambiente == 'Develop' }}
      run: |
        echo "VERSION: $VERSION-${{env.hash}}"
        mvn versions:set -DnewVersion=$VERSION-${{env.hash}}
        mvn clean deploy -Denv=$ENV_DEV -Dlicense.skip=true || echo "No se publico en exchange"
    - name: "Construir y Publicar en Exchange pre"
      if: ${{ inputs.ambiente == 'Preprod' }}
      run: |
        echo "VERSION: $VERSION-${{env.hash}}"
        mvn versions:set -DnewVersion=$VERSION-${{env.hash}}
        mvn clean deploy -Denv=$ENV_PRE -Dlicense.skip=true || echo "No se publico en exchange"
    - name: "Construir y Publicar en Exchange prod"
      if: ${{ inputs.ambiente == 'Production' }}
      run: |
        echo "VERSION: $VERSION-${{env.hash}}"
        mvn versions:set -DnewVersion=$VERSION-${{env.hash}}
        mvn clean deploy -Denv=$ENV_PROD -Dlicense.skip=true || echo "No se publico en exchange"
    - name: "Publicar resultados de pruebas"
      uses: EnricoMi/publish-unit-test-result-action@v2.0.0
      if: always()
      with:
        junit_files: "target/surefire-reports/*.xml"
    - name: "Desplegar Develop"
      if: ${{ inputs.ambiente == 'Develop' }}
      run: mvn clean package deploy -DskipTests -Dlicense.skip=true -Dclientid=${{secrets.MULE_CLIENT_ID}} -Dclientsecret=${{secrets.MULE_CLIENT_SECRET}} -Dappname=${{env.nombre_limpio}}-$AMBIENTE_DEV -Denvironment=$MULE_ENV_DEV -Dreplicas=${{inputs.replicas}} -Danypoint_client_id=${{secrets.ANYPOINT_CLIENT_ID}} -Danypoint_client_secret=${{secrets.ANYPOINT_CLIENT_SECRET}} -Denv=$ENV_DEV -DmuleDeploy

    - name: "Desplegar Preprod"
      if: ${{ inputs.ambiente == 'Preprod' }}
      run: mvn clean package deploy -DskipTests -Dlicense.skip=true -Dclientid=${{secrets.MULE_CLIENT_ID}} -Dclientsecret=${{secrets.MULE_CLIENT_SECRET}} -Dappname=${{env.nombre_limpio}}-$AMBIENTE_PRE -Denvironment=$MULE_ENV_PRE -Dreplicas=${{inputs.replicas}} -Danypoint_client_id=${{secrets.ANYPOINT_CLIENT_ID_PRE}} -Danypoint_client_secret=${{secrets.ANYPOINT_CLIENT_SECRET_PROD}} -Denv=$ENV_PRE -DmuleDeploy

    - name: "Desplegar Production"
      if: ${{ inputs.ambiente == 'Production' }}
      run: mvn clean package deploy -DskipTests -Dlicense.skip=true -Dclientid=${{secrets.MULE_CLIENT_ID}} -Dclientsecret=${{secrets.MULE_CLIENT_SECRET}} -Dappname=${{env.nombre_limpio}}-$AMBIENTE_PROD -Denvironment=$MULE_ENV_PROD -Dreplicas=${{inputs.replicas}} -Danypoint_client_id=${{secrets.ANYPOINT_CLIENT_ID_PRE}} -Danypoint_client_secret=${{secrets.ANYPOINT_CLIENT_SECRET_PROD}} -Denv=$ENV_PROD -DmuleDeploy