name: 2 Promote to Preprod üöÄ

concurrency: preprod

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version üì¶'
        required: true
        type: string
      
        
env:
  VERSION: ${{ inputs.version }}
  HASH: ${{ github.sha }}
  AMBIENTE: preprod
  MULE_ENV: Preprod

jobs:
  MuleDeploy:
    runs-on: ubuntu-22.04
    environment: Preprod   
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0
        
    - if: ${{ ! startsWith(inputs.version, 'fix/') }}
      name: "Validar n√∫mero de versi√≥n"
      run: |
        echo "Version ${{inputs.version}}"
        [[ "${{inputs.version}}" =~ ^([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)$ ]] && echo "Correcto" || exit 1
        echo "Validando si ya existe un release"
        ! git ls-remote --exit-code --heads origin releases/${{inputs.version}}
    
    - name: Configurar Git
      run: |
        git config --global user.name 'Github'
        git config --global user.email 'workflow@noreply.github.com'
        git branch --show-current

    # Si el tag es nuevo lo crea
    # Si ya existe el tag, lo elimina del repositorio (local y remoto) y lo crea de nuevo en el ultimo commit de main
    - if: ${{ ! startsWith(inputs.version, 'fix') }}
      name: "Crear tag de pre-release"
      run: |
        
        echo "VER=${{inputs.version}}" >> $GITHUB_ENV
                
        ############ Si es versi√≥n normal.
        if [[ ! "${{inputs.version}}" =~ ^([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)$ ]]; \
        then exit 1; fi
        git tag --force ${{inputs.version}} 
        git push origin ${{inputs.version}} --force     

    - if: ${{ startsWith(inputs.version, 'fix') }}
      name: "Crear tag de pre-release (desde fix)"
      run: |
        ############ Si es hotfix
        VER=(${{ inputs.version }})
        VER="${VER:4:10}"
        # En caso de que se est√© tratando con una rama de hotfix, se hace checkout a esa rama.
        if [[ ${{inputs.version}} == "fix/"$VER ]]; then git checkout ${{inputs.version}}; fi
        # La variable VER, contendr√° el input. Y en caso de que ese contenido comience con fix/ se recortar√°.
        if [[ ${{inputs.version}} == "fix/"$VER ]]; then git tag --force $VER; fi 
        if [[ ${{inputs.version}} == "fix/"$VER ]]; then git push origin $VER --force; fi

    # Se crea el pre-release
    # Si ya existe, primero se elimina y se crea de nuevo
    - if: ${{ startsWith(inputs.version, 'fix') }}
      name: "Release (desde fix)"
      run: |
        VER=(${{ inputs.version }})
        VER="${VER:4:10}"
        (gh release create $VER --title $VER -F CHANGELOG.md --prerelease) || \
        (gh release delete $VER -y && gh release create $VER --title $VER -F CHANGELOG.md --prerelease)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Se crea el pre-release
    # Si ya existe, primero se elimina y se crea de nuevo
    - name: "Release"
      if: ${{ ! startsWith(inputs.version, 'fix') }}
      run: |
        (gh release create ${{ inputs.version }} --title ${{ inputs.version }} -F CHANGELOG.md --prerelease) || \
        (gh release delete ${{ inputs.version }} -y && gh release create ${{ inputs.version }} --title ${{ inputs.version }} -F CHANGELOG.md --prerelease)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    ############ MULE #############
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin' # See 'Supported distributions' for available options
        java-version: '8'
        cache: 'maven'
    - uses: s4u/maven-settings-action@v2.6.0
      with:
        servers: '[{"id": "anypoint-exchange-v3", "username": "~~~Client~~~", "password": "${{secrets.MULE_CLIENT_ID}}~?~${{secrets.MULE_CLIENT_SECRET}}"}]'
    - name: Obtener nombre de proyecto
      run: |
        import os, re
        from xml.etree import ElementTree

        # Obtiene nombre del POM
        namespaces = {'xmlns' : 'http://maven.apache.org/POM/4.0.0'}
        tree = ElementTree.parse("pom.xml")
        root = tree.getroot()
        name = root.find("./xmlns:name", namespaces=namespaces)
        print(f"pom/name: {name}")

        # Convirte nombre a un nombre DNS valido
        nombre = re.sub(r"[^a-zA-Z0-9]+", "-", name.text).lower()
        print(f"nombre_limpio: {nombre}")      

        # Escribe variable
        print("Escribiendo nombre en GITHUB_ENV")
        with open(os.getenv('GITHUB_ENV'), "a") as github_env:
          github_env.write(f"nombre_limpio={nombre}")
      shell: python
    - name: "Construir y Publicar en Exchange"
      run: |
        mvn versions:set -DnewVersion=$VERSION-$HASH
        mvn clean deploy -DskipTests -Dlicense.skip=true || echo "No se publico en exchange"
    - name: "Desplegar"
      run: mvn clean package deploy -Dlicense.skip=true -Dclientid=${{secrets.MULE_CLIENT_ID}} -Dclientsecret=${{secrets.MULE_CLIENT_SECRET}} -Dappname=${{env.nombre_limpio}}-$AMBIENTE -Denvironment=$MULE_ENV -DmuleDeploy
